import { BottomSheetModal as BaseModal } from '@gorhom/bottom-sheet';
import { ComponentProps, PropsWithChildren, ReactNode } from 'react';
import { SharedValue } from 'react-native-reanimated';
import { ColorTokens, SpaceTokens, View } from 'ui/src';
import { HandleBarProps } from 'uniswap/src/components/modals/HandleBar';
import { ModalNameType } from 'uniswap/src/features/telemetry/constants';
export type ModalProps = PropsWithChildren<{
    animatedPosition?: SharedValue<number>;
    hideHandlebar?: boolean;
    name: ModalNameType;
    enableDynamicSizing?: boolean;
    onClose?: () => void;
    snapPoints?: Array<string | number>;
    stackBehavior?: ComponentProps<typeof BaseModal>['stackBehavior'];
    containerComponent?: ComponentProps<typeof BaseModal>['containerComponent'];
    footerComponent?: ComponentProps<typeof BaseModal>['footerComponent'];
    fullScreen?: boolean;
    handlebarColor?: HandleBarProps['indicatorColor'];
    backgroundColor?: ColorTokens;
    blurredBackground?: boolean;
    dismissOnBackPress?: boolean;
    isDismissible?: boolean;
    overrideInnerContainer?: boolean;
    renderBehindTopInset?: boolean;
    renderBehindBottomInset?: boolean;
    hideKeyboardOnDismiss?: boolean;
    hideKeyboardOnSwipeDown?: boolean;
    extendOnKeyboardVisible?: boolean;
    isModalOpen?: boolean;
    analyticsProperties?: Record<string, unknown>;
    skipLogImpression?: boolean;
    alignment?: 'center' | 'top';
    hideScrim?: boolean;
    maxWidth?: number;
    maxHeight?: ComponentProps<typeof View>['maxHeight'];
    height?: ComponentProps<typeof View>['height'];
    padding?: SpaceTokens;
    paddingX?: SpaceTokens;
    paddingY?: SpaceTokens;
    bottomAttachment?: ReactNode;
    gap?: ComponentProps<typeof View>['gap'];
    flex?: ComponentProps<typeof View>['flex'];
}>;
//# sourceMappingURL=ModalProps.d.ts.map