// Follow up to remove: WEB-5827
// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file conversionproxy/v1/api.proto (package conversionproxy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * @generated from message conversionproxy.v1.Header
 */
export class Header extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string key = 1;
         */
        this.key = "";
        /**
         * @generated from field: string value = 2;
         */
        this.value = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Header().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Header().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Header().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Header, a, b);
    }
}
Header.runtime = proto3;
Header.typeName = "conversionproxy.v1.Header";
Header.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message conversionproxy.v1.ProxyRequest
 */
export class ProxyRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string requestType = 1;
         */
        this.requestType = "";
        /**
         * @generated from field: string identifier = 2;
         */
        this.identifier = "";
        /**
         * @generated from field: string to = 3;
         */
        this.to = "";
        /**
         * @generated from field: string method = 4;
         */
        this.method = "";
        /**
         * @generated from field: repeated conversionproxy.v1.Header headers = 6;
         */
        this.headers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProxyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProxyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProxyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProxyRequest, a, b);
    }
}
ProxyRequest.runtime = proto3;
ProxyRequest.typeName = "conversionproxy.v1.ProxyRequest";
ProxyRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "requestType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "headers", kind: "message", T: Header, repeated: true },
]);
/**
 * @generated from message conversionproxy.v1.ProxyResponse
 */
export class ProxyResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 status = 1;
         */
        this.status = 0;
        /**
         * @generated from field: string statusText = 2;
         */
        this.statusText = "";
        /**
         * @generated from field: string body = 3;
         */
        this.body = "";
        /**
         * @generated from field: repeated conversionproxy.v1.Header headers = 4;
         */
        this.headers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProxyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProxyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProxyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProxyResponse, a, b);
    }
}
ProxyResponse.runtime = proto3;
ProxyResponse.typeName = "conversionproxy.v1.ProxyResponse";
ProxyResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "statusText", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "headers", kind: "message", T: Header, repeated: true },
]);
//# sourceMappingURL=api_pb.js.map